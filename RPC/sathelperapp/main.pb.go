// Code generated by protoc-gen-go. DO NOT EDIT.
// source: main.proto

package sathelperapp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConsoleData struct {
	ConsoleLines         []string `protobuf:"bytes,1,rep,name=consoleLines,proto3" json:"consoleLines,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsoleData) Reset()         { *m = ConsoleData{} }
func (m *ConsoleData) String() string { return proto.CompactTextString(m) }
func (*ConsoleData) ProtoMessage()    {}
func (*ConsoleData) Descriptor() ([]byte, []int) {
	return fileDescriptor_main_2f01ea1268a7a2bb, []int{0}
}
func (m *ConsoleData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsoleData.Unmarshal(m, b)
}
func (m *ConsoleData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsoleData.Marshal(b, m, deterministic)
}
func (dst *ConsoleData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsoleData.Merge(dst, src)
}
func (m *ConsoleData) XXX_Size() int {
	return xxx_messageInfo_ConsoleData.Size(m)
}
func (m *ConsoleData) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsoleData.DiscardUnknown(m)
}

var xxx_messageInfo_ConsoleData proto.InternalMessageInfo

func (m *ConsoleData) GetConsoleLines() []string {
	if m != nil {
		return m.ConsoleLines
	}
	return nil
}

type StatData struct {
	// Signal Quality (in percent)
	SignalQuality uint32 `protobuf:"varint,1,opt,name=signalQuality,proto3" json:"signalQuality,omitempty"`
	// If the signal is locked
	SignalLocked bool `protobuf:"varint,2,opt,name=signalLocked,proto3" json:"signalLocked,omitempty"`
	// Received Channel Packets
	ChannelPackets []int64 `protobuf:"varint,3,rep,packed,name=channelPackets,proto3" json:"channelPackets,omitempty"`
	// Reed Solomon Errors
	RsErrors []int32 `protobuf:"varint,4,rep,packed,name=rsErrors,proto3" json:"rsErrors,omitempty"`
	// Sync Word
	SyncWord []byte `protobuf:"bytes,5,opt,name=syncWord,proto3" json:"syncWord,omitempty"`
	// Current SCID
	Scid int32 `protobuf:"varint,6,opt,name=scid,proto3" json:"scid,omitempty"`
	// Current VCID
	Vcid int32 `protobuf:"varint,7,opt,name=vcid,proto3" json:"vcid,omitempty"`
	// Decoder Fifo Usage (in percent)
	DecoderFifoUsage int32 `protobuf:"varint,8,opt,name=decoderFifoUsage,proto3" json:"decoderFifoUsage,omitempty"`
	// Demodulator Fifo Usage (in percent)
	DemodulatorFifoUsage int32 `protobuf:"varint,9,opt,name=demodulatorFifoUsage,proto3" json:"demodulatorFifoUsage,omitempty"`
	// Viterbi Errors (in bits)
	ViterbiErrors int32 `protobuf:"varint,10,opt,name=viterbiErrors,proto3" json:"viterbiErrors,omitempty"`
	// Frame Size (in bits)
	FrameSize int32 `protobuf:"varint,11,opt,name=frameSize,proto3" json:"frameSize,omitempty"`
	// Phase Correction (in degrees)
	PhaseCorrection int32 `protobuf:"varint,12,opt,name=phaseCorrection,proto3" json:"phaseCorrection,omitempty"`
	// Sync Correlation (in bits)
	SyncCorrelation int32 `protobuf:"varint,13,opt,name=syncCorrelation,proto3" json:"syncCorrelation,omitempty"`
	// Center Frequency (in Hertz)
	CenterFrequency uint32 `protobuf:"varint,14,opt,name=centerFrequency,proto3" json:"centerFrequency,omitempty"`
	// Demodulator Mode
	Mode string `protobuf:"bytes,15,opt,name=mode,proto3" json:"mode,omitempty"`
	// Demuxer
	Demuxer string `protobuf:"bytes,16,opt,name=demuxer,proto3" json:"demuxer,omitempty"`
	// Device
	Device               string   `protobuf:"bytes,17,opt,name=device,proto3" json:"device,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatData) Reset()         { *m = StatData{} }
func (m *StatData) String() string { return proto.CompactTextString(m) }
func (*StatData) ProtoMessage()    {}
func (*StatData) Descriptor() ([]byte, []int) {
	return fileDescriptor_main_2f01ea1268a7a2bb, []int{1}
}
func (m *StatData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatData.Unmarshal(m, b)
}
func (m *StatData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatData.Marshal(b, m, deterministic)
}
func (dst *StatData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatData.Merge(dst, src)
}
func (m *StatData) XXX_Size() int {
	return xxx_messageInfo_StatData.Size(m)
}
func (m *StatData) XXX_DiscardUnknown() {
	xxx_messageInfo_StatData.DiscardUnknown(m)
}

var xxx_messageInfo_StatData proto.InternalMessageInfo

func (m *StatData) GetSignalQuality() uint32 {
	if m != nil {
		return m.SignalQuality
	}
	return 0
}

func (m *StatData) GetSignalLocked() bool {
	if m != nil {
		return m.SignalLocked
	}
	return false
}

func (m *StatData) GetChannelPackets() []int64 {
	if m != nil {
		return m.ChannelPackets
	}
	return nil
}

func (m *StatData) GetRsErrors() []int32 {
	if m != nil {
		return m.RsErrors
	}
	return nil
}

func (m *StatData) GetSyncWord() []byte {
	if m != nil {
		return m.SyncWord
	}
	return nil
}

func (m *StatData) GetScid() int32 {
	if m != nil {
		return m.Scid
	}
	return 0
}

func (m *StatData) GetVcid() int32 {
	if m != nil {
		return m.Vcid
	}
	return 0
}

func (m *StatData) GetDecoderFifoUsage() int32 {
	if m != nil {
		return m.DecoderFifoUsage
	}
	return 0
}

func (m *StatData) GetDemodulatorFifoUsage() int32 {
	if m != nil {
		return m.DemodulatorFifoUsage
	}
	return 0
}

func (m *StatData) GetViterbiErrors() int32 {
	if m != nil {
		return m.ViterbiErrors
	}
	return 0
}

func (m *StatData) GetFrameSize() int32 {
	if m != nil {
		return m.FrameSize
	}
	return 0
}

func (m *StatData) GetPhaseCorrection() int32 {
	if m != nil {
		return m.PhaseCorrection
	}
	return 0
}

func (m *StatData) GetSyncCorrelation() int32 {
	if m != nil {
		return m.SyncCorrelation
	}
	return 0
}

func (m *StatData) GetCenterFrequency() uint32 {
	if m != nil {
		return m.CenterFrequency
	}
	return 0
}

func (m *StatData) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *StatData) GetDemuxer() string {
	if m != nil {
		return m.Demuxer
	}
	return ""
}

func (m *StatData) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func init() {
	proto.RegisterType((*ConsoleData)(nil), "sathelperapp.ConsoleData")
	proto.RegisterType((*StatData)(nil), "sathelperapp.StatData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InformationClient is the client API for Information service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InformationClient interface {
	GetStatistics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatData, error)
	GetConsoleLines(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConsoleData, error)
}

type informationClient struct {
	cc *grpc.ClientConn
}

func NewInformationClient(cc *grpc.ClientConn) InformationClient {
	return &informationClient{cc}
}

func (c *informationClient) GetStatistics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatData, error) {
	out := new(StatData)
	err := c.cc.Invoke(ctx, "/sathelperapp.Information/GetStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informationClient) GetConsoleLines(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConsoleData, error) {
	out := new(ConsoleData)
	err := c.cc.Invoke(ctx, "/sathelperapp.Information/GetConsoleLines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformationServer is the server API for Information service.
type InformationServer interface {
	GetStatistics(context.Context, *empty.Empty) (*StatData, error)
	GetConsoleLines(context.Context, *empty.Empty) (*ConsoleData, error)
}

func RegisterInformationServer(s *grpc.Server, srv InformationServer) {
	s.RegisterService(&_Information_serviceDesc, srv)
}

func _Information_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sathelperapp.Information/GetStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).GetStatistics(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Information_GetConsoleLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).GetConsoleLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sathelperapp.Information/GetConsoleLines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).GetConsoleLines(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Information_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sathelperapp.Information",
	HandlerType: (*InformationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatistics",
			Handler:    _Information_GetStatistics_Handler,
		},
		{
			MethodName: "GetConsoleLines",
			Handler:    _Information_GetConsoleLines_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}

func init() { proto.RegisterFile("main.proto", fileDescriptor_main_2f01ea1268a7a2bb) }

var fileDescriptor_main_2f01ea1268a7a2bb = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x93, 0xdf, 0x8e, 0x12, 0x31,
	0x14, 0x87, 0x97, 0x5d, 0x60, 0xe1, 0x00, 0x0b, 0xdb, 0x6c, 0x48, 0x45, 0x63, 0x0c, 0xf1, 0x82,
	0x68, 0x32, 0x1b, 0xd7, 0x27, 0x58, 0x70, 0x51, 0x93, 0xbd, 0xc0, 0x21, 0xc6, 0xeb, 0xd2, 0x39,
	0x40, 0xe3, 0xd0, 0x8e, 0x6d, 0x87, 0x88, 0x4f, 0xe2, 0x43, 0xf9, 0x50, 0xb6, 0x9d, 0x65, 0x65,
	0x50, 0xef, 0x7a, 0xbe, 0xf3, 0xcd, 0xe9, 0x1f, 0x7e, 0x00, 0x6c, 0x98, 0x90, 0x51, 0xa6, 0x95,
	0x55, 0xa4, 0x6d, 0x98, 0x5d, 0x63, 0x9a, 0xa1, 0x66, 0x59, 0x36, 0x78, 0xba, 0x52, 0x6a, 0x95,
	0xe2, 0x75, 0xe8, 0x2d, 0xf2, 0xe5, 0x35, 0x6e, 0x32, 0xbb, 0x2b, 0xd4, 0xe1, 0x1b, 0x68, 0x4d,
	0x94, 0x34, 0x2a, 0xc5, 0x77, 0xcc, 0x32, 0x32, 0x84, 0x36, 0x2f, 0xca, 0x7b, 0x21, 0xd1, 0xd0,
	0xca, 0x8b, 0xb3, 0x51, 0x33, 0x2e, 0xb1, 0xe1, 0xaf, 0x2a, 0x34, 0xe6, 0x96, 0xd9, 0xf0, 0xc1,
	0x4b, 0xe8, 0x18, 0xb1, 0x92, 0x2c, 0xfd, 0x94, 0xb3, 0x54, 0xd8, 0x9d, 0xfb, 0xa2, 0x32, 0xea,
	0xc4, 0x65, 0xe8, 0xc7, 0x16, 0xe0, 0x5e, 0xf1, 0xaf, 0x98, 0xd0, 0x53, 0x27, 0x35, 0xe2, 0x12,
	0x23, 0xaf, 0xe0, 0x82, 0xaf, 0x99, 0x94, 0x98, 0xce, 0x98, 0x03, 0xd6, 0xd0, 0x33, 0xb7, 0xf9,
	0xd9, 0xf8, 0xb4, 0x57, 0x89, 0x8f, 0x3a, 0xe4, 0x39, 0x34, 0xb4, 0xb9, 0xd3, 0x5a, 0x69, 0x43,
	0xab, 0xce, 0xaa, 0x05, 0xeb, 0x91, 0x91, 0x01, 0x34, 0xcc, 0x4e, 0xf2, 0x2f, 0x4a, 0x27, 0xb4,
	0xe6, 0xf6, 0x6a, 0xc7, 0x8f, 0x35, 0x21, 0x50, 0x35, 0x5c, 0x24, 0xb4, 0xee, 0x78, 0x2d, 0x0e,
	0x6b, 0xcf, 0xb6, 0x9e, 0x9d, 0x17, 0xcc, 0xaf, 0xdd, 0x79, 0x7a, 0x09, 0x72, 0x95, 0xa0, 0x9e,
	0x8a, 0xa5, 0xfa, 0x6c, 0xd8, 0x0a, 0x69, 0x23, 0xf4, 0xff, 0xe2, 0xe4, 0x06, 0xae, 0x12, 0xdc,
	0xa8, 0x24, 0x4f, 0x99, 0x55, 0x07, 0x7e, 0x33, 0xf8, 0xff, 0xec, 0xf9, 0x97, 0xdb, 0x0a, 0x8b,
	0x7a, 0x21, 0x1e, 0x2e, 0x02, 0x41, 0x2e, 0x43, 0xf2, 0x0c, 0x9a, 0x4b, 0xcd, 0x36, 0x38, 0x17,
	0x3f, 0x90, 0xb6, 0x82, 0xf1, 0x07, 0x90, 0x11, 0x74, 0xb3, 0x35, 0x33, 0x38, 0x51, 0x5a, 0x23,
	0xb7, 0x42, 0x49, 0xda, 0x0e, 0xce, 0x31, 0xf6, 0xa6, 0x7f, 0x81, 0x40, 0xdc, 0x41, 0xbc, 0xd9,
	0x29, 0xcc, 0x23, 0xec, 0x4d, 0x8e, 0xd2, 0x9d, 0x61, 0xaa, 0xf1, 0x5b, 0x8e, 0x92, 0xef, 0xe8,
	0x45, 0xf8, 0x4d, 0x8f, 0xb1, 0x7f, 0x35, 0x77, 0x2f, 0xa4, 0x5d, 0xd7, 0x6e, 0xc6, 0x61, 0x4d,
	0x28, 0x9c, 0xbb, 0xdb, 0xe6, 0xdf, 0x51, 0xd3, 0x5e, 0xc0, 0xfb, 0x92, 0xf4, 0xa1, 0x9e, 0xe0,
	0x56, 0x70, 0xa4, 0x97, 0xa1, 0xf1, 0x50, 0xdd, 0xfc, 0xac, 0x40, 0xeb, 0xa3, 0x5c, 0x2a, 0xbd,
	0x29, 0xf6, 0xbf, 0x85, 0xce, 0x7b, 0xb4, 0x3e, 0x60, 0xc2, 0x58, 0xc1, 0x0d, 0xe9, 0x47, 0x45,
	0x80, 0xa3, 0x7d, 0x80, 0xa3, 0x3b, 0x1f, 0xe0, 0x41, 0x3f, 0x3a, 0x8c, 0x79, 0xb4, 0x8f, 0xe4,
	0xf0, 0x84, 0x4c, 0xa1, 0xeb, 0x46, 0x4c, 0x0e, 0x42, 0xfb, 0xdf, 0x21, 0x4f, 0xca, 0x43, 0x0e,
	0xfe, 0x0b, 0xc3, 0x93, 0xf1, 0x6b, 0xb8, 0x12, 0x2a, 0x5a, 0xe9, 0x8c, 0x97, 0xac, 0xf1, 0xe5,
	0x9c, 0xd9, 0x0f, 0xa1, 0xba, 0xcd, 0xb2, 0x99, 0x1f, 0x38, 0xab, 0x2c, 0xea, 0x61, 0xf2, 0xdb,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x38, 0xcb, 0xb5, 0xd1, 0x89, 0x03, 0x00, 0x00,
}
